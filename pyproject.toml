[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "control-panel"
dynamic = ["version"]
description = "Service management and control panel"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Control Panel Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "flask>=2.0.0",
    "tabulate>=0.9.0",
    "psutil>=5.8.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-flask>=1.2.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
panel = "control_panel.cli:main"
panel-web = "control_panel.web_ui:main"

[tool.setuptools.dynamic]
version = {attr = "control_panel.__version__"}

[tool.setuptools.packages.find]
include = ["control_panel*"]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "T20", # flake8-print
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by black)
    "S101",  # Use of assert (common in tests)
    "T201",  # Print statements (CLI tool needs them)
    "S603",  # subprocess call (CLI tool needs systemctl)
    "S607",  # Starting process with partial executable path (systemctl is in PATH)
    "S104",  # Possible binding to all interfaces (web server needs this)
    "UP022", # Prefer capture_output (style preference)
    "B007",  # Loop control variable not used (acceptable in some cases)
    "N802",  # Function name should be lowercase (HTTP handler methods)
]

# Per-file ignores
per-file-ignores = {"__init__.py" = ["F401"], "tests/*" = ["S101", "S608"]}

[tool.ruff.lint.isort]
force-single-line = false
force-sort-within-sections = true
known-first-party = ["control_panel"]

# Black configuration
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude generated files
  migrations
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = false
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_optional = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

# Per-module options
[[tool.mypy.overrides]]
module = [
    "setuptools.*",
    "tabulate.*",
    "psutil.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-config",
    "--strict-markers",
    "--cov=control_panel",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]

# Coverage configuration
[tool.coverage.run]
source = ["control_panel"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
